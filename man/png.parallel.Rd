% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.R
\name{png.parallel}
\alias{png.parallel}
\title{Parallel Execution Function using foreach and doParallel}
\usage{
png.parallel(
  iterable,
  FUN,
  cores = parallel::detectCores() - 1,
  .packages = NULL,
  .export = NULL,
  progress = TRUE,
  ...
)
}
\arguments{
\item{iterable}{A vector or list containing the tasks.}

\item{FUN}{A function to be applied to each element of \code{iterable}.}

\item{cores}{Number of cores to use. Defaults to \code{parallel::detectCores() - 1}.}

\item{.packages}{A character vector of package names to be loaded on each worker.}

\item{.export}{A character vector of objects to export to each worker.}

\item{progress}{Logical. If \code{TRUE}, a progress bar is displayed.}

\item{...}{Additional arguments passed to \code{FUN}.}
}
\value{
A list of results obtained by applying \code{FUN} to each element of \code{iterable}.
}
\description{
This function applies a user-specified function (\code{FUN}) to each element of an iterable
(a vector or list) in parallel using the \code{foreach} and \code{doParallel} packages.
}
\examples{
\dontrun{
# Example 1: Simple computation (square function)
square <- function(x) { x^2 }
tasks <- as.list(1:10)

# Serial execution timing
serial_time <- system.time({
  serial_result <- lapply(tasks, square)
})
print(serial_time)

# Parallel execution timing using png.parallel
parallel_time <- system.time({
  parallel_result <- png.parallel(tasks, FUN = square, cores = 2, progress = TRUE)
})
print(parallel_time)

# Check that results are identical
all.equal(serial_result, parallel_result)

# Example 2: Simulated heavy workload using Sys.sleep
heavy_task <- function(x) {
  Sys.sleep(0.5)  # 각 작업마다 0.5초 지연
  return(x^2)
}

tasks2 <- as.list(1:10)

# Serial execution timing for heavy_task
serial_time2 <- system.time({
  serial_result2 <- lapply(tasks2, heavy_task)
})
print(serial_time2)

# Parallel execution timing for heavy_task using png.parallel
parallel_time2 <- system.time({
  parallel_result2 <- png.parallel(tasks2, FUN = heavy_task, cores = 2, progress = TRUE)
})
print(parallel_time2)

# Check that results are identical
all.equal(serial_result2, parallel_result2)
}


}
